<!DOCTYPE html>
<html lang="{{craft.app.language}}">
{% set cookie = craft.cookieNotice.getCookie %}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    {% include '_snippets/_global/_favicon.twig' %}

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:ital,wght@0,400;0,500;0,700;1,400&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    {% include "_snippets/_head/_head-assets.twig" %}
</head>

<body>
    {# Get the cookie that has been set
    true => everything
    false => only the essential content
    2 => analytical
    3 => marketing
    #}

    <div id="mainContentBlock" class="site-container">
        {% if systemOffline is not defined %}
        {% set systemOffline = false %}
        {% endif %}

        {% include '_snippets/_global/_header.twig' %}
        {% include '_snippets/_global/_banner.twig' %}

        <main class="site-main">
            {% block content %} {% endblock %}
        </main>
        {% include '_snippets/_global/_partials/_toTop.twig' %}

        {% include '_snippets/_global/_footer.twig' %}
    </div>
    {{ craft.cookieNotice.render({ style: false }) }}

    <!-- prettier-ignore -->
    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a); })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)); })
            ({ key: "AIzaSyCPQr1ksSMHmKfvy8unzi5Eh97TxZFJ3uY", v: "beta" });
    </script>
</body>

</html>